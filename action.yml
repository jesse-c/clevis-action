name: "Clevis - The Big Linker"
description: "Check if values match between different parts of your codebase using configuration files"
author: "jesse-c"

branding:
  icon: "link"
  color: "blue"

inputs:
  config-path:
    description: "Path to the Clevis configuration file"
    required: false
    default: "./clevis.toml"

  link-key:
    description: "Specific link key to check (if omitted, checks all links)"
    required: false

  command:
    description: "Command to run: check, list, or show"
    required: false
    default: "check"

  verbose:
    description: "Enable verbose output"
    required: false
    default: "false"

  version:
    description: "Version of Clevis to use (defaults to latest release)"
    required: false

outputs:
  result:
    description: "Result of the check operation (true/false for check command)"

  output:
    description: "Full output from the clevis command"

runs:
  using: "composite"
  steps:
    - name: Download and setup Clevis
      shell: bash
      run: |
        # Determine architecture and OS
        ARCH=$(uname -m)
        OS=$(uname -s | tr '[:upper:]' '[:lower:]')

        # Map architecture names
        case $ARCH in
          x86_64) ARCH="x86_64" ;;
          aarch64|arm64) ARCH="aarch64" ;;
          *) echo "Unsupported architecture: $ARCH" && exit 1 ;;
        esac

        # Map OS names - based on actual release assets
        case $OS in
          linux) OS="linux" ;;
          darwin) OS="darwin" ;;
          *) echo "Unsupported OS: $OS" && exit 1 ;;
        esac

        # Get version to download
        if [ -n "${{ inputs.version }}" ]; then
          VERSION="${{ inputs.version }}"
          echo "Using specified Clevis version: $VERSION"
        else
          VERSION=$(curl -s https://api.github.com/repos/jesse-c/clevis/releases/latest | grep '"tag_name"' | cut -d'"' -f4)
          if [ -z "$VERSION" ]; then
            echo "Error: Failed to get latest version from GitHub releases"
            exit 1
          fi
          echo "Using latest Clevis version: $VERSION"
        fi

        # Download pre-built binary
        BINARY_NAME="clevis-${OS}-${ARCH}"
        DOWNLOAD_URL="https://github.com/jesse-c/clevis/releases/download/${VERSION}/${BINARY_NAME}"

        echo "Downloading clevis ${VERSION} for ${ARCH}-${OS}..."
        curl -L -o /tmp/clevis "${DOWNLOAD_URL}" || {
          echo "Error: Failed to download binary from ${DOWNLOAD_URL}"
          exit 1
        }

        chmod +x /tmp/clevis
        sudo mv /tmp/clevis /usr/local/bin/clevis

        # Verify installation
        clevis --version

    - name: Run Clevis
      shell: bash
      id: clevis
      run: |
        # Build command arguments
        ARGS=""

        if [ "${{ inputs.verbose }}" = "true" ]; then
          ARGS="$ARGS --verbose"
        fi

        if [ -n "${{ inputs.config-path }}" ]; then
          ARGS="$ARGS --path '${{ inputs.config-path }}'"
        fi

        # Add command
        case "${{ inputs.command }}" in
          "check")
            ARGS="$ARGS check"
            if [ -n "${{ inputs.link-key }}" ]; then
              ARGS="$ARGS '${{ inputs.link-key }}'"
            fi
            ;;
          "list")
            ARGS="$ARGS list"
            ;;
          "show")
            if [ -z "${{ inputs.link-key }}" ]; then
              echo "Error: link-key is required for show command"
              exit 1
            fi
            ARGS="$ARGS show '${{ inputs.link-key }}'"
            ;;
          *)
            echo "Error: Invalid command '${{ inputs.command }}'. Must be 'check', 'list', or 'show'"
            exit 1
            ;;
        esac

        echo "Running: clevis $ARGS"

        # Run clevis and capture output
        if OUTPUT=$(eval "clevis $ARGS" 2>&1); then
          echo "result=true" >> $GITHUB_OUTPUT
          echo "Clevis completed successfully"
        else
          echo "result=false" >> $GITHUB_OUTPUT
          echo "Clevis failed"
        fi

        # Save output (escape newlines for GitHub Actions)
        echo "output<<EOF" >> $GITHUB_OUTPUT
        echo "$OUTPUT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        # Also print output to step
        echo "$OUTPUT"

        # Exit with clevis's exit code for check command
        if [ "${{ inputs.command }}" = "check" ]; then
          eval "clevis $ARGS"
        fi
